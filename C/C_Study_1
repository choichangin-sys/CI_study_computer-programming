#include <stdio.h>

 

int pointer_main()

{

	double pi = 0;

	pi = 3.14;

 

	int aaa = 1;

	int bbb = 2;

	int* p = NULL;

	//const int* p = NULL; // 이렇게 사용한 경우 *p의 수정이 불가능해져 Error가 발생한다.

	//int* const p = NULL; // 이때는 주소를 집어넣는 p의 수정이 불가능해진다.

	//const int* const p = NULL; // 전부 Error가 발생한다.

 

	p = &aaa;

	printf("1. p의 값 : %d\n", *p); // 1

	aaa = 100;

	printf("2. p의 값 : %d\n", *p); // 100

	*p = 10000;

	printf("3. p의 값 : %d\n", *p); // 10000

 

	p = &bbb; // const여도 변동 가능.

	printf("3. p의 값 : %d\n", *p); // 10000

 

	int arr[2][3] = { 10,20,30,40,50,60 };

 

	int* ptr0;      // 4 바이트

	int* ptr1[2];   // 8 바이트

					// 여러개의 포인터를 만들어줌.

	int (*ptr2)[3]; // 배열용 포인터

					// (*ptr2)이 주소지만 [3]. 즉, 배열용이기 때문에 이중 포인터이다.

					// 4 바이트

					// int[3]을 가르키는 포인터 (배열의 포인터)

 

	printf("p사이즈 : %d\n", sizeof(ptr0));

	printf("p1사이즈 : %d\n", sizeof(ptr1));

	printf("p2사이즈 : %d\n", sizeof(ptr2));

 

	ptr0 = arr;

	printf("1. ptr0의 값 : %d, p의 가리키는 주소(arr)값 : %d, arr의 주소값 : %d, p의 주소값 : %d\n", *ptr0, ptr0, arr,&ptr0);

 

	ptr0++;

	printf("2. ptr0의 값 : %d, p의 주소값 : %d\n", *ptr0, ptr0);

 

	ptr0++;

	printf("3. ptr0의 값 : %d, p의 주소값 : %d\n", *ptr0, ptr0);

 

	ptr0++;

	printf("4. ptr0의 값 : %d, p의 주소값 : %d\n", *ptr0, ptr0);

 

	ptr0++;

	printf("5. ptr0의 값 : %d, p의 주소값 : %d\n", *ptr0, ptr0);

 

	ptr0++;

	printf("6. ptr0의 값 : %d, p의 주소값 : %d\n", *ptr0, ptr0);

 

 

	ptr2 = arr;

	printf("1. ptr2의 값 : %d, p의 주소값 : %d\n", **ptr2, *ptr2); // 값이 10이 나온다.

 

	ptr2++;

	printf("2. ptr2의 값 : %d, p의 주소값 : %d\n", **ptr2, *ptr2); // 값이 40가 나온다.

 

	// 즉, ptr (int (*ptr2)[3])는 한 칸씩이 아닌 3칸씩으로 묶어서 넘어간다.

 

	ptr2 = arr;

	printf("1. %d\n", ptr2[0]); // 주소가 나온다.

	printf("2. %d\n", ptr2[1]); // 주소가 나온다.

	printf("2_1. %d\n", ptr2[2]); // 주소가 나온다.

	printf("2_2. %d\n", ptr2[3]); // 주소가 나온다.

	printf("2_3. %d\n", ptr2[4]); // 주소가 나온다.

	printf("2_4. %d\n", ptr2[5]); // 주소가 나온다.

	printf("2_5. %p\n", ptr2[6]); // 주소가 나온다.

	printf("3. %d\n", ptr2[0][0]); // 값 10이 나온다.

	printf("3_1. %d\n", ptr2[0][1]); // 값 20가 나온다.

	printf("3_2. %d\n", ptr2[0][2]); // 값 30이 나온다.

	printf("3_3. %d\n", ptr2[0][3]); // 값 40가 나온다.

	printf("3_4. %d\n", ptr2[0][4]); // 값 50가 나온다.

	printf("3_5. %d\n", ptr2[0][5]); // 값 60이 나온다.

	printf("3_6. %d\n", ptr2[0][6]); // 쓰레기 값이 나온다.

 

	printf("4_3. %d\n", ptr2[1][-3]); // 값 10이 나온다.

	printf("4_2. %d\n", ptr2[1][-2]); // 값 20가 나온다.

	printf("4_1. %d\n", ptr2[1][-1]); // 값 30이 나온다.

	printf("4. %d\n", ptr2[1][0]); // 값 40가 나온다.

	printf("4_4. %d\n", ptr2[1][1]); // 값 50가 나온다.

	printf("4_5. %d\n", ptr2[1][2]); // 값 60이 나온다.

	printf("4_6. %d\n", ptr2[1][3]); // 쓰레기 값이 나온다.

 

	// ptr1 = arr; // 안넣어진다.

				   // 넣고 싶으면 방을 지정해줘야한다.

	ptr1[0] = arr[0]; //

	printf("1. ptr1[1] : %d\n", *ptr1[0]); // 값이 10이 나온다.

	ptr1[0] = arr; //

	printf("1. ptr1[1] : %d\n", *ptr1[0]); // 값이 10이 나온다.

	//ptr1[0] = arr[0][0]; // Error 발생

	//printf("1. ptr1[1] : %d\n", *ptr1[0]); // 값이 10이 나온다.

	printf("1. ptr1[1] : %d\n", *ptr1[0]+1); // 값이 11이 나온다.

	printf("1. ptr1[1] : %d\n", *(ptr1[0]) + 1); // 값이 11이 나온다.

	printf("1. ptr1[1] : %d\n", *(ptr1[0] + 1)); // 값이 20이 나온다.

	//printf("1. ptr1[1] : %d\n", *ptr1[1]); // Error 발생.

 

	ptr1[1] = arr[1]; 

	printf("2. ptr1[2] : %d\n", *ptr1[1]); // 값이 40가 나온다.

 

	ptr1[1] = arr[2]; 

	printf("2. ptr1[2] : %d\n", *ptr1[1]); // 쓰레기 값이 나온다.

	return 0;

}
