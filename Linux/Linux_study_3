출처 표시 : "이것이 리눅스다 [개정판][with RedHat CentOS 8]" <저자 : 우재남> <출판사 : 한빛미디어> <출간년도 : 초판 2015년 7월 1일 (개정판 2쇄 : 2020년 9월 20일)>

vi는 자주 사용해야 할 기능이므로 반드시 익혀야 한다.

gedit은 X윈도일 때만 사용이 가능하다. 

vi => 명령 모드 -> 입력 모드
                    ->  모드(라인 명령 모드)[여기서 저장(w), 종료(q), 취소(i)]

기본적으로 명령 모드에서 입력 모드 or 모드(라인 명령 모드) 중에서 선택을 해야한다.
선택을 하기 전에 입력을 할 수 없다. ( i ) or ( a )를 입력하면 입력 모드로 전환된다. 이때 파일 내에 쓰고 지우며 내용을 입력 할 수 있다. 입력 모드에서 빠져나오려면 ( ESC ) 버튼을 누르면 명령모드로 전환된다. 명령 모드에서 ( : )를 입력하면 저장(w), 종료(q), 취소(i)를 할 수 있다. 가장 큰 특징은 마우스가 없어도 된다는 점이므로 X윈도가 아닐 때도 사용이 가능하다는 점이다. (텍스트 리눅스인 경우일 때 사용.)

vi 종료 : ESC + Shitf를 누른 후 ; ( : ) + q

:q = 파일 나오기
ex) ESC + Shitf를 누른 후 ; ( : ) + q

:q! = 파일을 빠져나오지만, 저장을 하지 않는다.

:w = 파일 저장 
ex) ESC + Shitf를 누른 후 ; ( : ) + w (파일명)

:i = 파일 취소

* vi 에디터가 비정상적으로 종료 시에 조치법 *
-------------------------------------------------------
E325 : ATTENTION
Found a swap file by the name ".(파일명)" 
~~~~
~~~~
~~~~
-------------------------------------------------------

이러한 형태의 창이 뜨는 경우 비정상적으로 종료 후 다시 열었을 때이다. :q를 이용해 저장하거나 임시파일을 삭제하면 된다.

이때, 저장한 파일명과 다르게 점이 있는 경우 ( .(파일명) ) 숨김 파일이다. 그렇기에 ls -a (숨은 파일까지 보기)를 입력하면 찾을 수 있다.

rm (파일명) = (파일명) 삭제 (정말 삭제할 것인지 물어봄.)
rm -f (파일명) = (파일명) 삭제 (삭제할 것인지 안 물어봄.)

============================================================
vi 기능 요약

1. 명령 모드 => 입력 모드
( i ) = 현재 커서의 위치부터 입력
( a ) = 현재 커서의 위치 다음 칸부터 입력
( I ) = 현재 커서 줄의 맨 앞에서부터 입력 [대문자 i]
( A ) = 현재 커서 줄의 맨 마지막부터 입력

2. 명령 모드에서 커서를 이동 [방향키랑 같다.]
( h ) = 커서를 왼쪽으로 한 칸 이동
( k ) = 커서를 위로 한 칸 이동
( j ) = 커서를 아래로 한 칸 이동
( l ) = 커서를 오른쪽으로 한 칸 이동

3. 명령 모드에서 삭제, 복사, 붙여넣기
( x ) = 현재 커서가 위치한 글자 삭제 (Delete와 같은 의미)
( X ) = 현재 커서가 위치한 앞글자 삭제(BackSpace)와 같은 의미
( dd ) = 현재 커서의 행 삭제
( 숫자dd ) = 현재 커서부터 숫자만큼의 행 삭제 (숫자 다음 d 연속 두 번 입력)
( yy ) = 현재 커서가 있는 행을 복사 
( 숫자yy ) = 현재 커서부터 숫자만큼의 행을 복사 (숫자 다음 y 연속 두 번 입력)
( p ) = 복사한 내용을 현재 행 이후에 붙여넣기
( P ) = 복사한 내용을 현재 행 이전에 붙여넣기

4. 명령 모드에서 추가적으로 알면 좋은 기능
( :set number ) = 행 번호 표시 *필수로 알아두기*
( :%s/기존 문자열/새 문자열 ) = 문자열을 치환
============================================================

man (명령어) = 그 명령에 대한 도움말이 나오며, Space 바를 누르면 다음 내용을 볼 수 있다. q를 나오면 빠져나올 수 있다.

마운트와 CD/DVD 및 USB
마운트 : 물리적인 장치를 특정한 위치 (대개는 디렉터리)에 연결시켜 주는 과정.

윈도우즈와 차이점은 CD/DVD나 USB를 연결 시 자동으로 드라이브가 할당되어 연결된다. [연결 시 USB D드라이브(D:) F드라이브(F:) 등] 하지만 리눅스는 그렇지 않다. 그렇기에 CD/DVD나 USB를 연결 할 때마다 특정한 디렉터리에 내가 직접 연결하여 사용해야한다.

mount를 입력 시 연결된 하드웨어들이 나오게 된다.

umount ( 디렉터리 ) : 연결된 하드웨어의 연결이 끊어진다. 단, 그 폴더에서 나와서 해야한다. (그렇지 않은 경우 오류 발생 | 사용 중이므로 오류가 발생)

리눅스에 USB를 연결할 때 파일 시스템은 ( FAT32(기본값) )로 설정되어 있어야한다. (아닌 경우 FAT32로 포맷을 해야한다.)

관례적으로 media 디렉터리에 연결을 많이 하지만 다른 곳에 연결해도 상관은 없다.

mount ( CD/DVD or USB ) (원하는 해당 디렉터리)
ex) mount /dev/cdrom /media/cdrom

CD/DVD : /dev/cdrom
USB : /dev/sdb1
* 자세한 것은 뒤에서 언급된다. 일단 처음은 sdba이고 그 다음은 sdb1, sdb2 ...... 이런 식이다.  CD/DVD/는 리눅스마다 다르지만 /dev/cdrom은 대부분 통일하여 사용하기 쉽게 설정되어 있다.*

* 리눅스 기본 명령어들 *
ls = Windows의 'dir'과 같은 역할로, 해당 디렉터리에 있는 파일의 목록을 볼 수 있음.
ls -l = 디렉터리를 보여주는데 자세히 볼 수 있음.
ls -a = 숨긴 파일을 볼 수 있음.
ls -al = ls -l과 ls -a을 합친 기능
ex) ls /etc/sysconfig [/etc/sysconfig의 디렉터리를 보여줌]


cd = 디렉터리를 이동
ex) cd ../etc/sysconfig ( '.' = 현재 디렉터리 | '..' = 현재의 상위(앞) 디렉터리 )

* 사용자 디렉터리로 이동할 때 cd /home/centos로 이동하면 된다. 하지만 cd ~centos라고 입력하면 centos가 어디에 있든 알아서 찾아낸다. 굳이 이런 방식을 쓰는 이유는 사용자 디렉토리의 위치를 안다면 첫 번째 방식과 같이 이동하면 되지만 모르는 경우는 찾을 수 없으므로(찾는 데 많은 시간이 소요되므로)(사용자 디렉터리의 위치가 다른 경우가 있다.) cd ~centos라고 이동하는 것이 좋다 *


pwd = 현재 디렉터리의 전체 경로를 출력


rm =파일이나 디렉터리를 삭제
ex) rm -f abc
rm (파일명) = (파일명) 삭제 (정말 삭제할 것인지 물어봄.)
rm -f (파일명) = (파일명) 삭제 (삭제할 것인지 안물어봄.)
rmdir (디렉터리) = (디렉터리) 삭제 (안에 뭐가 있는 경우에 삭제 안 됨.)
rm -r (디렉터리) = 디렉터리에 뭐가 있든 상관없이 삭제한다. (정말 삭제할 것인지 물어봄.)
rm -rf (디렉터리) = 디렉터리에 뭐가 있든 상관없이 삭제한다. (삭제할 것인지 안 물어봄.) * 조심해서 써야 한다. *

* 리눅스는 휴지통 개념이 거의 없어 한 번 삭제된 파일을 복구하기 힘들다. *


cp = 파일이나 디렉터리를 복사 ( cp (복사할 파일 or 디렉터리) (복사한 파일 or 디렉터리의 새 이름) )
ex) cp abc.txt cha.txt (파일 복사) | cp -r abc def (디렉터리 복사)


mkdir = 새로운 디렉터리를 생성
mkdir -p aa/bb/cc/dd = aa디렉터리 안에 bb, 그 안에 cc 그안에 dd를 한꺼번에 만듦.
ex) mkdir abc 


touch = 크기가 0인 새 파일을 생성, 이미 존재하는 경우 수정 시간을 변경
ex) touch abc.txt


cat (파일) = 텍스트로 작성된 파일을 화면에 출력
head (파일) = 텍스트로 작성된 파일을 상위 10줄만 보여준다. (너무 길어서 다 보기 힘들 때 사용.)
head -5 (파일) = 텍스트로 작성된 파일의 상위 5줄만 보여준다. (5를 다른 숫자로 바꾸면 그 숫자만큼 보여줌.)
tail (파일)  = 텍스트로 작성된 파일을 하위 10줄만 보여준다. (너무 길어서 다 보기 힘들 때 사용.)
tail -5 (파일) = 텍스트로 작성된 파일의 하위 5줄만 보여준다. (5를 다른 숫자로 바꾸면 그 숫자만큼 보여줌.)
ex) cat (파일) | head (파일) | head -9 (파일)


more : 텍스트로 작성된 파일을 화면에 페이지 단위로 출력
ex) more file.txt (중간에 나가고 싶다면 ( q or :q )를 누르면 빠져나온다.)


less : more과 용도가 비슷하지만, 기능이 더 확장된 명령
ex) less (파일) (중간에 나가고 싶다면 ( q or :q )를 누르면 빠져나온다.)


file : File이 어떤 종류의 파일인지 표시
ex) file (파일)


clear : 명령창을 깨끗하게 만들어줌.
