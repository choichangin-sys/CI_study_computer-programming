출처 표시 : "이것이 리눅스다 [개정판][with RedHat CentOS 8]" <저자 : 우재남> <출판사 : 한빛미디어> <출간년도 : 초판 2015년 7월 1일 (개정판 2쇄 : 2020년 9월 20일)>

네트워크 관련 필수 개념

TCP/IP 
= 컴퓨터끼리 네트워크상으로 의사소통을 하는 "프로토콜"(컴퓨터끼리 소통하는 언어라고 볼 수 있다.) 중 가장 널리 사용되는 프로토콜의 한 종류

호스트 이름(Host name)과 도메인 이름(Domain name)
= 호스트 이름은 각각의 컴퓨터에 지정된 이름
= 도메인 이름(또는 도메인 주소)은 hanhit.co.kr과 같은 형식

IP 주소
= 각 컴퓨터의 랜카드에 부여되는 중복되지 않는 유일한 주소
= 4바이트로 이루어져 있으며, 각 자리는 0 ~ 255까지의 숫자
ex) Server의 IP 주소는 192.168.111.100

네트워크 주소
= 같은 네트워크에 속해 있는 공통된 주소
ex) 192.168.111.0

브로드캐스트(Broadcast) 주소
= 내부 네트워크의 모든 컴퓨터가 듣게 되는 주소
= 현재 주소의 제일 끝자리를 255로 바꾼 주소 (C클라스)

게이트웨이(Gateway), 라우터(Router)
= [ 라우터 = 게이트웨이 ]
= 네트워크 간에 데이터를 전송하는 컴퓨터 또는 장비
= VMware의 게이트웨이 주소는 192.168.111.2로 고정

넷마스크(Netmask) & 클래스(Class)
넷마스크 = 네트워크 규모를 결정 
ex) 255.255.255.0 - C클래스

DNS(Domain Name System) 서버(= 네임 서버) 주소
= URL을 해당 컴퓨터의 IP주소로 변환해 주는 서버 ( 홈페이지에 주소 = 예) www.google.com )
= 설정 파일은 /etc/resolv.conf
= VMware를 사용하면 VMware가 192.168.111.2번을 게이트웨이 및 DNS 서버로, 192.168.111.254를 DHCP 서버로 설정함.

===========================================================================================

네트워크 관련 명령어

nmtui = 네트워크와 관련된 대부분 작업을 이 명령어에서 수행하며 텍스트 기반으로 작동함.
- 자동 IP 주소 또는 고정 IP 주소 사용 결정
- IP 주소, 서브넷 마스크, 게이트웨이 정보 입력
- DNS 정보 입력
- 네트워크 카드 드라이버 설정
- 네트워크 장치(현재는 ens160)의 설정

systmectl <start/stop/restart/status> NetworkManager
= 네트워크의 설정을 변경한 후에, 변경된 내용을 시스템에 적용하는 명령어

X 윈도의 그래픽 모드를 사용하려면 'gnome-control-center network' 명령어를 사용한다.

ifup (장치 이름) / ifdown (장치 이름)
= 네트워크 장치를 On 또는 Off 시키는 명령어

ifconfig (장치 이름)
= 장치의 IP 주소 설정 정보를 출력

nslookup
= DNS 서버의 작동을 테스트하는 명령어
ex)
------------------------------------
nslookup
> server
Default server: 8.8.8.8
Address: 8.8.8.8#53

> www.hanbit.co.kr
Server:	8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answer:
Name:	www.hanbit.co.kr
Address: 218.38.58.195
------------------------------------

ping ( IP 주소 또는 URL )
= 해당 컴퓨터가 네트워크상에서 응답하는지를 테스트하는 간편한 명령어
===========================================================================================

===========================================================================================

네트워크 설정과 관련된 주요 파일

/etc/sysconfig/network 
= 네트워크의 기본적인 정보가 설정되어 있는 파일

/etc/sysconfig/network-scripts/ifcfg-ens160
= ens160 장치에 설정된 네트워크 정보가 모두 들어 있는 파일
* DNS 서버의 정보는 정확히 말하면 여기에 있다. 컴퓨터를 켜면 /etc/resolv.conf 여기로 보낸다.*


/etc/resolv.conf *이 파일은 잘 기억해두기*
= DNS 서버의 정보 및 호스트 이름이 들어 있는 파일

/etc/hosts
= 현 컴퓨터의 호스트 이름 및 FQDN이 들어 있는 파일

* 위 4개 파일을 직접 편집하면 "nmuti"를 사용하지 않아도 됨. *

* Google에서 운영하는 DNS 서버는 8.8.8.8이다. 알아두면 좋다. *

===========================================================================================

네트워크 보안을 위한 SELinux

= SELinux (Security Enhanced Linux)는 보안에 취약한 리눅스를 보호하기 위해 탄생
= 강제(Enforcing), 허용(Permissive), 비활성(Disabled) 세 가지 레벨로 구성
= 설정 파일인 /etc/sysconfig/selinux를 편집하거나, system-config-selinux 명령으로 설정

작동 방식
= '강제(Enforcing)'는 시스템 보안에 영향을 미치는 기능이 감지되면 아예 그 기능이 작동되지 않도록 시스템에서 막아줌.
= '허용(Permissive)'은 시스템 보안에 영향을 미치는 기능이 감지되면 허용은 되지만 그 내용이 로그에 남음.
= '비활성(Disabled)'은 SELinux를 사용하지 않음. 

파이프, 필터, 리디렉션

파이프 (pipe)
= 두 개의 프로그램을 연결해 주는 연결통로의 의미
= " | " 문자를 사용함
ex) ls -l /etc | more

필터 (fiter)
= 필요한 것만 걸러 주는 명령어
= grep, tail, wc, sort, grep, awk, sed 등
= 주로 파이프와 같이 사용
ex) ps -ef | grep bash

리디렉션 (redirection)
= 표준 입출력의 방향을 바꿔 줌
ex) ls -l > list.txt
     soft <list.txt> out.txt

프로세스, 데몬

정의 = 하드디스크에 저장된 실행 코드(프로그램)가, 메모리에 로딩되어 활성화된 것.

포그라운드 프로세스 (Foreground Process)
= 실행하면 화면에 나타나서 사용자와 상호작용을 하는 프로세스
= 대부분의 응용 프로그램

* 터미널에서 작업할 때 일반적으로 사용자가 명령을 입력하면 셸은 사용자가 입력한 명령을 해석하여 실행하고 그 결과를 화면에 출력한다. 
그러면 사용자는 화면에 출력된 결과를 보고 다시 명령을 입력하는 대화식으로 작업을 수행한다.
이렇게 사용자가 입력한 명령이 실행되어 결과가 출력될 때 까지 기다려야 하는 포그라운드 방식으로 처리되는 프로세스를 포그라운드 프로세스라고 하며, 
이를 작업 제어에서는 포그라운드 작업이라고 한다. *

* 포그라운드 작업은 명령을 한 번에 하나씩 실행하므로 동시에 여러 개의 프로세스를 실행할 수 없다. *

백그라운드 프로세스 (Background Process)
= 실행은 되었지만, 화면에는 나타나지 않고 실행되는 프로세스
= 백신 프로그램, 서버 데몬 등

* 작업 제어가 제공하는 백그라운드 기능을 사용하면 앞에서 프로세스가 실행되는 동안 뒤에서 다른 프로세스가 실행될 수 있으므로 
한 터미널에서 여러 개의 프로세스를 동시에 실행할 수 있다. 백그라운드 방식으로 명령을 실행하면 명령의 처리가 끝나는 것과 관계없이 
곧바로 프롬프트가 출력되어 사용자가 다른 작업을 계속할 수 있다. 즉 필요한 여러 작업을 백그라운드로 실행한 후 터미널에서는 포그라운드 작업을 계속 진행할 수 있다.  *

* 명령을 백그라운드로 실행하려면 명령의 마지막에 & 기호를 추가하면 된다 *

프로세스 번호
= 각각의 프로세스에 할당된 고유번호

작업 번호
= 현재 실행되고 있는 백그라운드 프로세스의 순차 번호

부모 프로세스와 자식 프로세스
= 모든 프로세스는 부모 프로세스를 가지고 있다.
= 부모 프로세스가 kill 하면, 자식 프로세스도 자동으로 kill 됨

프로세스 관련 명령

ps 
= 현재 프로세스의 상태를 확인하는 명령어
= "ps -ef | grep (프로세스 이름)"을 주로 사용함

* "ps -ef"를 입력하면 백그라운 프로세스뿐만 아니라 포그라운드 프로세스까지 보여준다.*

kill
= 프로세스를 강제로 종료하는 명령어
= "kill -9 (프로세스 번호)"는 강제 종료

pstree
= 부모 프로세스와 자식 프로세스의 관계를 트리 형태로 보여줌

[Ctrl] + [z] / stop (작업 번호) = 포그라운드 작업을 일시 중지한다.

bg (작업 번호) = 작업 번호를 백그라운드 작업으로 전환

fg (작업 번호) = 작업 번호를 포그라운드 작업으로 전환

[Ctrl] + [c] = (포그라운드) 작업 종료

서비스와 소켓

서비스
= 시스템과 독자적으로 구동되어 제공하는 프로세스를 말한다. 예로 웹 서버(httpd), DB 서버(mysqld), FTP 서버(vsftpd) 등이 있다.
= 실행 및 종료는 대개 'systemctl start/stop/restart (서비스 이름)'으로 사용된다.
= 서비스 실행 스크립트 파일은 /usr/lib/systemd/system/ 디렉터리에 '(서비스 이름). 
  service'라는 이름으로 확인 할 수 있다. 예를 들어 Cron 서비스는 crond.service라는 이름의 파일로 존재한다. 

소켓
= 서비스는 항상 가동되지만, 소켓은 외부에서 특정 서비스를 요청할 경우에 systemd가 구동시킨다. 그리고 요청이 끝나면 소켓도 종료된다.
= 그래서 소켓으로 설정된 서비스를 요청할 때는 처음 연결되는 시간이 앞에서 설명한 서비스에 비교했을 때 약간 더 걸릴 수 있다. 
  왜냐하면, systemd가 서비스를 새로 구동하는 데 시간이 소요되기 때문이다. 이와 같은 소켓의 대표적인 예로 텔넷 서버를 들 수 있다.
= 소켓과 관련된 스크립트 파일은 /usr/lib/systemd/system/ 디렉터리에 (소켓 이름).socket라는 이름으로 존재한다.

* 예전 CentOS에서는 소켓과 비슷한 개념으로 xinetd 데몬이 주로 사용되었다. *

* CentOS 8도 xinetd 데몬을 지원한다. 하지만 많은 서비스가 xinetd 대신에 소켓으로 사용된다. *
