출처 표시 : "이것이 리눅스다 [개정판][with RedHat CentOS 8]" <저자 : 우재남> <출판사 : 한빛미디어> <출간년도 : 초판 2015년 7월 1일 (개정판 2쇄 : 2020년 9월 20일)>

프로그램 설치를 위한 RPM
RPM (Redhat Package Manager) : Windows의 "setup.exe"와 비슷한 설치 파일이며 확장명은 *.rpm이며, 이를 '패키지(Package)'라고 부름.

-----------------------------------------------------------------------------------------------
cd /run/media/root/CentOS-8-BaseOS-x86_64/BaseOS/Packages로 이동
ls -l gzip* 입력
-r--r--r-- 1 root root 169968 7월 2 2019 gzip-1.9-4.el8.x86_64.rpm 이라고 나온다.
이때, 패키지 이름 - 버전 - 릴리즈번호.CentOS버전.아키텍처.rpm이다.

패키지 이름 : gzip  -> 패키지(프로그램)의 이름
버전 : 1.9             -> 대개 3자리 수로 구성. 주 버전, 부 버전, 패치 버전
릴리즈번호 : 4       -> 문제점을 개선할 때마다 붙여지는 번호
CentOS 버전 : el8    -> CentOS에서 배포할 경우 붙여짐
아키텍처 : x86_64   -> 64비트 CPU를 의미

* x86_64 : 64비트 CPU / i386 ~ 686 : 32비트 CPU / src : 소스 / noarch : 모든 CPU *
-----------------------------------------------------------------------------------------------

설치 : rpm-Uvh (패키지 파일 이름).rpm
        U -> (대문자) 패키지가 설치 / 업그레이드
        v -> 설치과정의 확인
        h -> 설치 진행 과정을 "#"마크로 화면에 출력

삭제 : rpm -e (패키지 이름)

이미 설치된 패키지 질의
rpm -qa (패키지 이름) -> 패키지가 설치되었는지 확인
rpm -qf (파일의 절대 경로) -> 파일이 어느 패키지에 포함된 것인지 확인
rpm -qi (패키지 이름) -> 설치된 패키지 파일의 상세 정보를 알 수 있음.
rpm -ql (패키지 이름) -> 관련된 파일들을 볼 수 있음.

아직 설치되지 않은 rpm 파일에 대한 질의
rpm -qlp (패키지 파일 이름).rpm -> 패키지 파일에 어떤 파일들이 포함되었는지 확인
rpm -qip (패키지 파일 이름).rpm -> 패키지 파일의 상세 정보

패키지를 설치할 때 설치하고 싶은 패키지의 정보를 보려면 rpm -qip (패키지 명)을 입력하면 알 수 있다.

의존성 패키지 설치하는 방법
* 의존성 패키지는 패키지를 설치하는데 다른 패키지가 필요하여 설치가 오류나는 것는 패키지이다. 패키지를 깔고 깔고 계속 반복하여 나중에 전부 설치 할 수 있지만 dmf를 사용하면 편리하다.  *
DNF(Dandified dnf) 개념 : "rpm"명령의 패키지 의존성 문제를 완전하게 해결했다. 인터넷을 통해 필요한 파일을 저장소(Repository)에서 자동으로 모두 다운로드해서 설치하는 방식이다. CentOS 7은 YUM, CentOS 8은 YUM이 개선된 DNF 명령을 사용한다.

===================================================

DNF 기본적 사용법

기본 설치 : dnf install (패키지 이름)
* 주로 "dnf -y install (패키지 이름)"으로 사용하며 -y는 사용자의 확인을
모두 "yes"로 간주하고 설치를 진행한다는 옵션이다. *

RPM 파일 설치 : dnf install rpm(파일 이름).rpm

업데이트 가능한 목록 보기 : dnf check-update

업데이트 : dnf update (패키지 이름)

삭제 : dnf remove (패키지 이름)

정보 확인 : dnf info (패키지 이름)

* 저장소의 URL은 "/etc/yum.repos.d/" 디렉터리 *

===================================================

dnf를 사용하기 위해서는 네트워크가 연결되어 있어야 한다. (서버에서 정보를 받아오기 때문) 그렇기에 설치에 오류가 생기며는 패키지 이름이 올바른지와 네트워크 연결에 문제가 없는지 확인해야 한다.

ping www.google.com을 입력하면 응답을 하는지 확인을 해보고 ESC를 누르면 빠져나올 수 있다. 

=========================================================

DNF 고급 사용법

패키지 그룹 설치 : dnf groupinstall (패키지 그룹 이름)

패키지 리스트 확인 : dnf list (패키지 이름)

패키지 그룹 리스트 확인 : dnf grouplist
* dnf grouplist hidden이라 입력하면 볼 수 없던 더 많은 것까지 볼 수 있게 된다. *

특정 파일이 속한 패키지 이름 확인 : dnf provides (파일 이름)

GPG 키 검사 생략 : dnf install --nogpgcheck rpm(파일 이름).rpm
* CentOS 8에서 인증되지 않은 패키지를 강제로 설치할 때 사용 *

기존 저장소 목록 지우기 : dnf clean all

=========================================================

DNF 작동 방식 설정 파일 
= dnf install (패키지 이름) 명령이 작동하는 방식

1. dnf install 입력 => 2. /etc/yum.repos.d/ 디렉터리의 repo 파일을 열어서 URL 주소 확인 =>
3. 전체 패키지 목록 파일 요청(CentOS 8 패키지 저장소에 요청함) => 4. 전체 패키지 목록 파일만 다운로드 => 5. 설치할 패키지와 관련된 패키지의 이름을 화면에 출력 => 6. y를 입력하면 설치에 필요한 패키지 파일 요청 => 7. 설치할 패키지 파일을 다운로드해서 자동 설치
* 3번, 4번, 6번, 7번의 과정을 인터넷(네트워크)을 통해 이루어진다. * 

/etc/yum.conf파일 : 특별히 변경할 필요 없음.
/etc/yum.repos.d/ 디렉터리 : dnf명령을 입력했을 때 검색하게 되는 네트워크의 주소가 들어 있는 여러 개의 파일이 있음
/etc/yum.repos.d/ 디렉터리*.repo파일 : CentOS 8의 1905버전만 설치되도록 하기 위해 /etc/yum.repos.d/ 폴더의 내용을 모두 삭제하고 This.repo 파일을 새로 생성하여 남겨둠. 그리고 This.repo 파일에 BaseOS, AppStream 등의 저장소를 별도로 적어놓음.

* dnf로 설치할 때 네트워크가 연결되어 있으면 서버로 깔고 네트워크가 연결이 안 되어 있으면 DVD로 깔 수도 있다. *

==========================================================

* cd /etc/yum.repos.d/로 이동한 후 backup에 This.repo를 옮긴다. 그 후에 vi dvd.repo를 만든 후 아래와 같이 입력했다. 그 결과 BaseOS와 AppStream으로 다운 받을 수 있는 것은 다운을 받지만, 그 외의 것은 Network를 통해 다운받았다. 이때 이름이 dvd일 필요는 없지만, 확장명이 .repo여야한다. *

[DVD-BaseOS]
name=CentOS DVD BaseOS
baseurl=file:///media/cdrom/BaseOS/
gpgcheck=0

[DVD-AppStream]
name=CentOS DVD AppStream
baseurl=file:///media/cdrom/AppStream/
gpgcheck=0

[Network-PowerTools]
name=CentOS-$releasever - PowerTools
baseurl=http://mirror.centos.org/centos-8/8.0.1905/PowerTools/x86_64/os/
        http://vault.centos.org/8.0.1905/PowerTools/x86_64/os/
gpgcheck=0

==========================================================

ifdown ens160 : 네트워크를 끌 수 있다.
ifup ens160 : 네트워크를 킬 수 있다.

파일 압축
= 압축파일 확정명은 xz, bz2, gz, zip, Z 등
= xz나 bz2 압축률이 더 좋음.

파일 압축 관련 명령
xz : 확장명 xz로 압축을 하거나 풀어준다.
ex) xz (파일명), xz -d (파일명).xz 

bzip2 : 확장명 bz2로 압축을 하거나 풀어준다.
ex) bzip2 (파일명), bzip2 -d (파일명).bz2

bunzip2 : "bzip2 -d"옵션과 동일한 명령어.

gzip : 확장명 gz으로 압축을 하거나 풀어준다.
ex) gzip (파일명), gzip -d (파일명).gz

gunzip : "gzip -d"옵션과 동일한 명령어

* 압축 시 기존 파일을 압축을 해버린다. 즉, 원본파일이 압축되어 없어진다. Windows와 같은 경우 압축을 한 파일과 안 한 원본파일이 있지만, 리눅스에서 압축은 원본 파일 그 자체이다. *

zip : 확장자명 zip로 압축을 하거나 풀어준다.
ex) zip (파일명).zip (파일명)

* zip 같은 경우 Windows와 호환이 되는 게 큰 특징이다. 또한 압축을 하거나 풀 때 원본 파일이 남아있다. *
* 일반적으로 성능은 xz > bzip2 > gzip > zip *

파일 묶기 
리눅스(유닉스)에서는 '파일 압축'과 '파일 묶기'는 원칙적으로 별개의 프로그램으로 수행한다.
파일 묶기의 명령어는 'tar'이며, 묶인 파일의 확장명도 'tar'이다.

파일 묶기 명령(tar)
tar : 확장명 tar로 묶음 파일을 만들어 주거나 묶음을 풀어 준다.
동작 : c(묶기) / x(풀기) / t(경로 확인)
옵션 : f(파일) / v(과정보이기) / J(tar+xz) / z(tar+gzip) / j(tar+bzip2)

사용 예
tar cvf my.tar /etc/sysconfig/ -> 묶기
tar cvf my.tar.xz /etc/sysconfig/ /etc/sysconfig/ -> 묶기 + xz압축
tar xvf my.tar -> tar 풀기
tar xvf my.tar.xz /etc/sysconfig/ -> xz 압축 해제 + tar 풀기

파일 위치 검색
명령어 = find [경로] [옵션] [조건] [action] : 기본 파일 찾기
[옵션] = -name / -user(소유자) / -newer(전, 후) / -perm(허가권) / -size(크기)
[action] = -print(디폴트) / -exec(외부 명령 실행)
ex) find /etc -name "*.conf" =>  etc 디렉터리에서 확장명이 conf인 것을 찾아라
ex) find /etc/bin -size +10k -size -100k => etc 디렉터리 속 bin 디렉터리에서 10KB 이상 100KB 미만의 파일들을 찾아라
ex) find /home -name "*.swp" -exec rm { } \; => home 디렉터리에 확장명 swp인 파일을 삭제하라는 의미
* 이 때, { }는 find /home -name "*.swp"이다. 또한, -exec와 \;는 외부 명령어의 시작과 끝을 표시하는 의미다. 즉, find /home -name "*.swp"로 파일을 찾은 rm으로 삭제하는데 시작과 끝을 알기 위해 -exec와 \;로 나타내는 것이다. *

* 잘 사용하지 않지만 알아두면 좋은 것들 *
which (실행 파일 이름) = PATH에 설정된 디렉터리만 검색
whereis (실행 파일 이름) = 실행 파일, 소스, man 페이지 파일까지 검색
locate (파일 이름) = 파일 목록 데이터베이스에서 검색

시스템 설정
표준 시간대 변경 (설정 >> [날짜 및 시간])
네트워크 설정 (nmtui)
방화벽 설정 (firewall-config)
서비스 설정 (ntsysv)

cron : 주기적으로 반복되는 일을 자동으로 실행될 수 있도록 설정하는 것. 관련된 데몬(서비스)은 "crond", 관련 파일은 "/etc/crontab"이다.

/etc/crontab 파일은 시간별, 일별, 주별, 월별로 나뉘며 순서대로 /etc/cron.hourly/ | /etc/cron.daily/ | /etc/cron.weekly/ | /etc/cron.monthly/ 이다.

특정 파일( 스크립트 파일( .sh )seti )은 /etc/cron.hourly/ 등에 넣어두면 시간별로 안에 있는 파일이 자동으로 실행이 된다.

systemctl status crond을 입력하면 정상작동이 되고 있는지 알 수 있고 active (running) [초록색 글씨] 이라고 나와 있으면 crond를 사용할 수 있다. (q를 누르면 빠져나올 수 있다.)

* 만약 작동을 안 하고 있으면 명령어로 systemctl start crond 를 입력하면 작동이 된다. *

* 명령어로 vi /etc/crontab 을 입력하면 cron을 사용하는 도움말이 나온다. *

* 실행파일( .sh )를 넣었으면  systemctl restart crond를 통해 재시작하여 실행파일이 작동 할 수 있도록 한다. *

* date (월 [2자리])(일 [2자리])(시간 [2자리])(분 [2자리])(년도 [4자리])를 입력하면 원하는 시간으로 설정 할 수 있다. 또한 rdate -s time.bora.net을 입력하면 시간을 옮긴 것을 정상적으로 되돌릴 수 있다. *

at : cron은 주기적으로 반복되는 작업을 예약하는 것이지만, at는 일회성 작업을 예약하는 것이다.

예약 : at [시간]
ex) at 3:00am tomorrow => 내일 새벽 3시
     at 11:00pm January 30 => 1월 30일 오후 11시
     at now + 1 hours => 1시간 후

at> 프롬프트에 예약 명령어 입력 후 [Enter]를 누른다. 만약 완료되면 [Ctrl] + [D]를 누른다.


==================
ex) 실제 화면 모습

at> dnf -y update
at> reboot

==================

확인 : at -l

취소 : atrm (작업번호)
