* Sub Query(서브쿼리)
- SQL명령내에서 [값을 추출하기 위한 쿼리문]이 필요한 경우 사용되는 고급쿼리 기법
- 서브쿼리는 반드시 ()로 묶는다.
- 서브쿼리가 먼저 실행된 후, 외부쿼리와 비교/연산된다(상관쿼리 제외)
- 서브쿼리의 결과는 값이다=조건과 함께 외부쿼리로 나오지 않는다 ***
- 서브쿼리만으로도 문법적으로 오류없다(상관쿼리 제외)
- 최대 64개의 서브쿼리까지 사용 가능하다

- 이순신과 같은 부서에서 근무하는 사람
select deptno, saname from sawon
where deptno = (select deptno from sawon where saname = '이순신');

-- 종류
1. 단일행 서브쿼리 : 서브쿼리의 결과 행이 단일*행(값)인 경우(연산자 : >, <, >=, <=, =, !=)
2. 다중행 서브쿼리 : 서브쿼리의 결과 행이 다중*행(값)인 경우(in***, any, all, exists)
------------------
3. 다중컬럼 서브쿼리 : 서브쿼리의 결과 컬럼이 두 개 이상인 경우
4. 상호관련 서브쿼리 : 외부쿼리의 단일 후보 행이 서브쿼리로 들어가서 비교/연산된 후,
		    그 결과값이 다시 외부의 후보행과 최종 비교/연산되는 원리

any : 추출 행값 중에서 1개 이상
all : 값 >all 서브쿼리 결과값 중에 제일 큰값보다 큰것인지 값, <all 제일 작은 값이 작은 것인지(max,min때문에 안씀)

-회사에서 평균급여보다 많이 받는 사람을 추출
select saname, sapay from sawon
where sapay>(select avg(sapay) from sawon);

-회사에서 급여를 가장 많이 받는 사람을 추출
select saname, sapay from sawon
where sapay=(select max(sapay) from sawon);

-10번 부서에서 전체 사원들의 평균급여보다 많이 받는 사람을 추출 
select deptno, saname, sapay from sawon
where deptno=10 
   and sapay>(select avg(sapay) from sawon);

-10번 부서에서 최대급여, 최소급여를 받는 사람을 추출
select saname, sapay from sawon
where
	(sapay = (select max(sapay) from sawon where deptno = 10) or 
	 sapay = (select min(sapay) from sawon where deptno = 10))
   and deptno=10;

--where sapay=5000 or sapay=1000

-'영업부'에서 가장 급여를 많이 받는 사람
select s.saname, d.dname, s.sapay from sawon s, dept d
where s.sapay in(select max(decode(d.dname, '영업부', s.sapay)) from sawon s, dept d 
	          where d.deptno=s.deptno) 
   and d.deptno=s.deptno;

--where sapay = (select max(sapay) from sawon 
	           where deptno = (select deptno from dept where dname='영업부'));
     and deptno = (select deptno from dept where dname='영업부')

-- 이순신과 부서와 직책이 같은 사람을 추출(다중컬럼)
select deptno, sajob, saname from sawon
where (deptno, sajob) = (select deptno, sajob from sawon where saname='이순신')
// 추출되는 컬럼의 개수, 순서, 타입이 같아야 함
// 추출되는 컬럼과 비교하는 연산자는 같아야 함

-- 각 부서에서 최대급여를 받는 사람을 추출(다중컬럼)
select deptno, saname, sapay from sawon
where (deptno, sapay) in (select deptno, max(sapay) from sawon group by deptno);

-각 부서에서 각 부서의 평균급여보다 많이 받는 사람을 추출(상관쿼리)
select deptno, saname, sapay from sawon s
where sapay > (select avg(sapay) from sawon t 
	         where t.deptno = s.deptno);

-- 각 부서에서 최대급여를 받는 사람을 추출(상관쿼리)
select deptno, saname, sapay from sawon s
where sapay = (select max(sapay) from sawon t 
	        where t.deptno = s.deptno);

## 스칼라 서브쿼리(컬럼 서브쿼리)
-- 사원명, 직책, 직책평균(자신이 속한 직책의 평균급여)를 추출
select saname, sajob, (select avg(sapay) from sawon t where s.sajob=t.sajob) "직책평균" from sawon s;

## Top & N 서브쿼리
--최대값 또는 최소값을 가진 일부의 행을 추출하는데 사용하는 서브쿼리 기법(반드시 rownum 이용)
--from절 서브쿼리 : inline-view, 가상테이블 개념
		 자원사용이 많은 복잡한 쿼리에 남용하는 경우 성능 저하

-- 회사에서 급여를 많이 받는 3명을 추출
select saname, sapay from (select saname, sapay from sawon order by sapay desc)
where rownum<=3;

-- 회사에서 오래 근무한 5명을 추출
select name, hiredate from (select saname name, sahire hiredate from sawon order by 2)
where rownum<=5;

## exists연산자 : not in의 해결
--서브쿼리의 결과값이 존재하면 외부쿼리가 실행, 존재하지 않으면 외부쿼리가 실행되지 않는 연산자

SQL> select * from dept
  2  where exists(select dname from dept where deptno=90);

선택된 레코드가 없습니다.

SQL> select * from dept
  2  where exists(select dname from dept where deptno=20);

    DEPTNO DNAME      LOC
---------- ---------- ----------
        10 총무부     서울
        20 영업부     대전
        30 전산부     부산
        40 관리부     광주

-- 부하직원이 없는 사람을 추출
select saname, sajob from sawon
where sabun not in(select distinct samgr from sawon);  -- X

select saname, sajob from sawon s
where not exists(select sabun from sawon m where m.samgr = s.sabun);  //***

## with 명령 : from절 서브쿼의 성능저하를 최소화하기 위한 명령
--형식
with table_name1 as (select.....),
      table_name2 as (select......),
      .....
select ~ ~~ from table_name1 , table_name2,...;

-부서별 급여합계가 전체 회사 평균급여의 30%를 초과하는 부서명과 급여합계를 추출
select dname, sum(sapay) dept_total from sawon natural join dept
group by dname
having sum(sapay) > (select avg(sapay)*0.3 from sawon);

with dept_tot as (select dname, sum(sapay) dept_total from sawon natural join dept group by dname),
       all_tot   as (select avg(sapay) all_total from sawon)
select dt.dname, dt.dept_total  from dept_tot dt, all_tot at
where dt.dept_total > at.all_total * 0.3;

* union 연산자
- 두 개 이상의 select명령의 결과를 하나로 추출하는 연산자
- 추출되는 컬럼의 개수, 순서, 타입이 일치

// 종류
-- 추출되는 컬럼의 수, 순서, 타입이 일치해야 함

-union all : 단순히 연결해서 하나로 추출
-union	 : 중복행 제거(합집합), 정렬작업 포함
-intersect : 중복행만 추출(교집합), 정렬작업 포함
-minus    : 상위 추출 결과 - 하위 추출 결과(차집합), 정렬작업 포함

select saname, deptno, sajob from sawon where sajob='과장' or sajob='대리'
union all  --***
select saname, deptno, sajob from sawon where sajob='사원' or sajob='대리';

* Level Query
-- 오라클만 존재, 카테로리 형식의 데이터로 설계된 경우, 조직도 형태인 경우 편리
-- 단계별 쿼리 기법(level 1은 자기자신)

--3번 사원의 하위레벨(부하직원)을 추출
select level, sabun, saname, sajob from sawon [where sabun!=3]
connect by prior sabun=samgr
start with sabun=3;  // 기준

--'한국남'의 하위레벨을 추출
select level, sabun, saname, sajob from sawon
connect by prior sabun=samgr
start with saname='한국남';

--'이순라'의 상위레벨을 추출
select level, sabun, saname, sajob from sawon
connect by sabun=prior samgr
start with saname='이순라';

* 테이블 복사
--제약조건은 복사되지 않는다(not null제외)
--테이블 구조만 복사하는 경우 : where절을 거짓으로 사용

--형식 : create table table_name(컬럼명,...) as select~~;

create table dept_tot_bk
as
select dname, sum(sapay) "부서합계" from sawon natural join dept
group by dname;

create table dept_ex
as
select * from dept where 1=2;

* DML
- 데이터 조작 명령, 데이터 변경 명령, 데이터 흐름 명령, 트랜젝션 명령, 일처리 명령
- 행*** 단위의 실행
- autocommit off
- insert, update, delete [select]

1. insert
- insert into table_name values(값, 값,....);                //전체 컬럼값을 가진 입력
- insert into table_name(컬럼명,...) values(값,...);         //선택 컬럼값을 가진 입력***(컬럼의 개수나 순서를 몰라도 됨)
- insert into table_name(컬럼명,...) select ~~~;         //다중 행단위 입력

2. delete
- delete [from] table_name where~;
- 테이블 전체 행을 삭제할 때 : truncate명령 사용

3. update
- update table_name set 컬럼명=값,... where~;

-- sawon_ex, gogek_ex, dept_ex table 사본을 생성하여 작업

1. 고객의 담당자가 없는 고객은 13번 사원으로 변경
update gogek_ex set godam=13 where godam is null;

2. 13번 담당자를 갖는 고객의 담당자를 null로 변경
update gogek_ex set godam=null where godam=13;

3. sawon_10 테이블에 직책이 사원이며 부서가 관리부인 사원들을 sawon 테이블로부터 입력
create table sawon_10 as select * from sawon where 1=2;

insert into sawon_10 select * from sawon 
		  where sajob='사원'
		     and deptno=(select deptno from dept where dname='관리부');

4. 이순신의 부서와 같은 사원들의 직책을 이순신의 직책으로 변경
update sawon_ex 
set sajob=(select sajob from sawon_ex where saname='이순신') 
where deptno=(select deptno from sawon_ex where saname='이순신');

5. 영업부 사원들의 급여를 10% 인상 변경
update sawon_ex 
set sapay=sapay*1.1
where deptno=(select deptno from dept_ex where dname='영업부');

6. 영업부 부서의 직책 사원 중에서 회사의 평균급여보다 낮은 사원들을 삭제
delete sawon_ex 
where sajob='사원' 
   and deptno=(select deptno from dept_ex where dname='영업부')
   and sapay<(select avg(sapay) from sawon_ex); 

7. 사원 테이블에서 영업부 사람들의 급여를 자신의 소속 직책의 평균급여와 같게 변경
update sawon_ex s 
set sapay=(select avg(sapay) from sawon_ex s1 where s.sajob=s1.sajob)
where deptno =(select deptno from dept_ex where dname='영업부');
