App은 OS or System 드라이브를 피해서 설치한다. (권장)

가상메모리의 최적화 : 실제메모리의 1.5배

이유는 가상메모리 때문.
프로그램을 실행하면 가상메모리가 발생하는데 OS(C:)가 있는 곳에서 프로그램을 
설치하면 가상메모리를 OS와 같은 C:에서 가져온다. 이때 사용한 프로그램이 가상메모리에
문제가 생기면 OS에 메모리 크러쉬가 발생하여 OS가 타격을 입을 수 있다.

- 서버에서 가지고 있는 것 -
CTL   - ( 오라클관리 -> 1개 )
LOG - ( Insert, Update, Delete = DML 명령 저장 )
DBF   - ( 실질적으로 사용 )

sys      - 모든 권한 소유
system - 데이터를 올리고 내리는 것은 불가

OracleServiceJSDB 	         = 자동차 엔진과 같음
Db11g_home1TNSListener = 자동차 기어와 같음

* 오라클 완전 삭제 *
(오라클을 완전히 삭제를 안하면 제대로 설치가 안됨.)
1. (Universal Installer) uninstall (설치화면) : <설치된 제품> 선택한 후 <제거>
2. 레지스트리에서 삭제(regedit) :
	- hkey_locall_machine
		- software\oracle : 삭제
		- system\controlset~ 중 1개\service\ora~ : 삭제 
	=> 재부팅
3. 물리적으로 관련 파일 삭제 :
	- OS:\program files\orcale
	- 설치드라이브 : \app

* 웹서버에 접속하는 클라이언트 : 브라우저 *

sqlplus /nolog => SQL 접속 (오라클 서버에 접속하기 위한 클라이언트 : sqlplus)
SQL 접속 후 로그인을 해야함 => conn system/password : system으로 접속
( conn sys/password as sysdba == conn / as sysdba : sys로 접속 )

* scott/tiger, hr/ : 연습 계정 *
=> 잠금해제 및 암호변경
alter user scott account unlock identified by tiger;

현재 접속 유저 확인 = show user

* SQL*PLUS 명령(Tool명령) & SQL명령(DBMS명령) *
SQL*PLUS 명령(Tool명령) => 마지막에 세미콜론이 없으며 한 줄로 코딩한다.
		        => 사용한 명령이 버퍼에 기억되지 않음. (마지막으로 사용된 것만 기억한다.)

SQL명령(DBMS명령) => 마지막에 세미콜론이 있음.
		  => 사용한 명령이 버퍼에 기억됨.


모든 데이터는 table에 저장된다.
select * from tab; : table 확인 명령어

피지컬용어 : 눈에 보이는 것
로지컬용어 : 눈에 안보이는 것 

피지컬용어 / 로지컬용어 
attfibute (속성) / column (컬럼)
 	        / row (행)

table은 컬럼, 데이터는 행이다.

table 정의 : 1개 이상의 컬럼과 0개 이상의 행으로 만들어진 것
* 컬럼은 데이터가 아님 *

컬럼의 구조를 보는 명령어 : desc emp
아무 데이터를 뽑을 때 쓰는 임시 저장소 : dual; 
	=> select sysdate from dual; : dual에 현재 날짜를 가져오는 것
----------------------------------------------------------------------------------------------------------------------------------------------------------
* 데이터 타입 *
=> 저장을 하드디스크에 함. 프로그램은 스텍에 저장한다. 

- 숫자 : number(x) : 정수형 / number(x, y) : 실수형 ( x : 전체 자리수, y : 소수점 자리수 )
	=> 진짜 자리수이다. 데이터의 개념이 아닌 진짜 자리수, 아무것도 안적으면 38byte, 1byte는 0~9까지 저장이 가능한 가지수

- 문자 : char(x) / varchar2(x) :
	=> 최대 크기는 1024, 아무것도 안적으면 1byte이다. varchar는 가변형, char는 고정형이다.
	=> 가변형은 쓸 만큼 쓰고 안쓴 부분은 반환한다. (만약, 동적데이터(변경이 많은)에 사용하지 않는다.)
	=> 가변은 한 번 저장된 데이터만큼 쓰고 안쓴 부분은 반환, 나중에 더 큰 데이터가 들어오면 저장을 못하기 때문에
	=> 다른 곳에 주소를 저장하고 새로운 메모리에 저장한다. (변동이 크면 계속 주소가 늘어나서 데이터를 찾는데 오래 걸린다.)

- 날짜 : date(8byte) : '(yy)yy/mm/dd' '21/06/11' 
	=> 날짜가 비교, 연산이 된다. 날짜단위로 데이터를 뽑는 등 할 수 있다.
	=> 자주 사용하기 때문에 날짜데이터가 있다.
	=> 년도가 2자리인 경우 yy와 rr이 있다. yy일 때 무조건 현세기, rr일 때 0-49 현세기이며 50-99일 때 전세기이다.

- 멀티미디어 : raw / clob & blob

ed : 숫자는 붙여서 가능. 문자는 한 칸 띄우고 ed1 / ed a
host : login 상태를 유지하여 잠깐 윈도우로 나옴.
exit : host 상태 시 login상태로 돌아가고 login 상태면 logout을 한다.

* oder by를 쓰지 않으면 select시 행주소에 따라 정렬함 *
* 행을 쪼개서 저장하는 것을 파티셔닝 튜닝이라 한다. *
* 분석할 때 from부터 분석한다. *
* --는 한 줄 주석이다.  *

* 연산자 *
- select 컬럼명 (as) "컬럼 별칭", ... from 테이블명, ... ( , ... 은 여러개 선언 가능 ) // 제한된 컬럼***을 추출함

- where 컬럼명 조건... // 제한된 행***을 추출 : 조건절에 참인 행만 추출 대상이다.
	=> 이 조건 때문에 연산자가 있는 것.
	=> 1. 산술연산자 : +, -, *, /, mod(10,3) = 1 (나머지 구하는 것 10 / 3)
	=> 2. 관계 연산자 : =, !=(<>), >=, <=, >, <
	=> 3. 문자열 연산자 : like
	==================================================
	=> 4. 논리 연산자 : not, and, or ( 우선순위 : and > or )

* SQL 연산자 우선 순위 *
산술 연산자 ( *, / ) > 산술 연산자 ( +, - ) = 연결 연산자( || )  > not > and > or

* 10번 부서인 사람을 추출 *
=> select deptnom, ename from emp -- 8개의 컬럼 중 2개만 선택
where deptno = 10; -- 이 행만 참인 행만 불러냄

-- 급여가 1000~2000이상인 사람을 추출
select ename, sal from emp where sal not between 1000 and 2000;
==
select ename, sal from emp where sal < 1000 or sal > 2000;

select ename, sal from emp where sal between 1000 and 2000;
==
select ename, sal from emp where sal >= 1000 and sal <= 2000;

-- 업무(job)가 salesman, clerk인 사람을 추출
select ename, job from emp where job = 'SALESMAN' or job = 'CLERK'; 
=> 데이터의 대/소문자를 구분 (upper & lower)
=> ex) select ename, job from emp where lower(job) = 'salesman' or lower(job) = 'clerk'; // 데이터를 대/소문자로 바꿔서 비교

=		왼쪽 피연산자와 오른쪽 피연산자가 같으면 참을 반환함.
!=, <>		왼쪽 피연산자와 오른쪽 피연산자가 같지 않으면 참을 반환함.
<		왼쪽 피연산자가 오른쪽 피연산자보다 작으면 참을 반환함.
<=		왼쪽 피연산자가 오른쪽 피연산자보다 작거나 같으면 참을 반환함.
>		왼쪽 피연산자가 오른쪽 피연산자보다 크면 참을 반환함.
>=		왼쪽 피연산자가 오른쪽 피연산자보다 크거나 같으면 참을 반환함.
<=>		양쪽의 피연산자가 모두 NULL이면 참을 반환하고, 하나의 피연산자만 NULL이면 거짓을 반환함.

IS		왼쪽 피연산자와 오른쪽 피연산자가 같으면 참을 반환함.
		(오른쪽 피연산자가 불리언 값인 TRUE, FALSE, UNKNOWN 값일 때 사용함)

IS NOT		왼쪽 피연산자와 오른쪽 피연산자가 같지 않으면 참을 반환함.
		(오른쪽 피연산자가 불리언 값인 TRUE, FALSE, UNKNOWN 값일 때 사용함)

IS NULL		피연산자의 값이 NULL이면 참을 반환함.
IS NOT NULL	피연산자의 값이 NULL이 아니면 참을 반환함.

IN()		피연산자의 값이 인수로 전달받은 리스트에 존재하면 참을 반환함.
NOT IN()		피연산자의 값이 인수로 전달받은 리스트에 존재하지 않으면 참을 반환함.

BETWEEN min AND max		피연산자의 값이 min 값보다 크거나 같고, max 값보다 작거나 같으면 참을 반환함.
NOT BETWEEN min AND max	피연산자의 값이 min 값보다 작거나 max 크면 참을 반환함.

* IN은 OR의 집합, BETWEEN은 AND의 집합 정도로 볼 수 있다. *

insert into emp(empno, ename, hiredate) values(101, '최창인', sysdate); // 행 추가
commit; // 커밋 완료시킴
delete emp where empno = 101; // 행삭제

--입사일 '21/01/01' ~ '21/06/11'인 사람을 추출하시오. ( A~B날짜*** 제한 )
select ename "이름" ,empno "회번", hiredate"입사일" from emp where hiredate >= '210101' and hiredate < '21/06/12';
=> 21/06/12로 바뀌는 21/06/12 00:00:00까지 포함 되므로 =을 뺀다. 만약 21/06/12가 아닌 21/06/11이면  21/06/11 00:00:00까지만 체크하므로
=>  21/06/11 00:00:01 ~ 21/06/11 23:59:59은 포함이 안된다. 그렇기에 21/06/12을 사용.

--입사일이 21/06/11 자정 ~ 오후 6시까지인 사람을 추출하시오.
select ename "이름" ,empno "회번", hiredate"입사일" from emp 
where hiredate >= to_date('21/06/11 00:00:00' ,'yy/mm/dd hh24:mi:ss') and hiredate <= to_date('21/06/11 18:00:00','yy/mm/dd hh24:mi:ss');
==
select ename "이름" ,empno "회번", hiredate"입사일" from emp 
where hiredate >= '210101' and hiredate <= to_date('21/06/11 18:00:00','yy/mm/dd hh24:mi:ss');

* || : 연결 연산자. *
select ename || '의 급여는 ' || sal || '입니다.' from emp;
=> SMITH의 급여는 800입니다.

* nvl(a, b) * 
=> a에서 NULL인 것은 b 대체한다. 
=> nvl(컬럼, 대체값)

--이름, 급여, 커미션, 급여 + 커미션으로 사람을 추출하시오.
select ename, sal, comm, sal + nvl(comm, 0) total  from emp;

--이름이 A로 시작하는 사람을 추출
select ename from emp where ename like 'A%';
=> %는 이후에 무슨 글자가 있든 상관없다는 말이다.
=> 예를 들어, 'A%'가 아닌 'A'이면 A라는 이름을 가진 사람을 찾는다. 
=> 하지만 'A%'인 경우 A~~로 A로 시작하는 모든 사람을 찾는다.
=> 이때 앞에 like가 꼭 있어야한다. (문자열 연산자)

--이름 두 번째 문자가 L인 사람을 추출
select ename from emp where ename like '_L%';
=> _는 한 글자만 무엇이든 상관없다는 의미이다.
=> %는 몇 글자든 상관없다는 의미이다.

--이름에 L이 두 번 이상 포함되는 사람을 추출
select ename from emp where ename like '%L%L%';

--이름에 'A_'이 두 번 이상 포함되는 사람을 추출
select ename from emp where ename like 'A$_' escape '$';
=> _ 앞에 아무 특수문자를 넣고 escape를 통해 지운다.

* 정렬작업 *
=> 가급적 정렬작업 회피
=> select 명령으로 가능한 마지막 명령이다. 연산기능 없음.
=> order by 컬럼명 [(asc)|desc],......
=> order by 컬럼명 [ 이름 | 별칭 | 순서번호]도 가능.
=> 정렬을 할 때 낮은 순으로 정렬된다. ( 영어 < 한글 ), ( 작은 값 < 큰 값 )
select
from 테이블
=> from (select)인 경우 select가 
where 
=> TRUE일 때 추출대상
=> 테이블일 때는 별칭을 쓸 수 없다. 실제 이름을 써야한다.
group by
having
order by

-- 부서별로 정렬하되, 같은 부서는 급여가 높은 순서대로 정렬하여 추출(단, 급여가 널인 사람은 제외)
select ename, deptno, sal from emp order by 2, 3 desc;

* distinct *
=> 중복된 것을 제거

* 새로운 유저 만들기 *
=> create user cci identified by password default tablespace users 
=> cci 자리는 자유롭게, default tablespace users는 연습용으로 만든다는 의미
=> 실제로 만들면 create user cci identified by password됨.

* 권한 부여 *
=> grant connect, resource to cci;
=> connect, resource는 단어로 나오는데 단어로 나오는 것은
=> 관련된 권한을 묶어둔 집합체이다.
=> 이것을 롤(role)이라고 부른다.


