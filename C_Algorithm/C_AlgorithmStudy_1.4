// 출처 표시 : "문제로 풀어보는 알고리즘" <저자 : 황인욱, 김용혁 지음> <출판사 : 인사이트> <출간년도 : 초판 2012년 8월 5일 (8쇄 : 2018년 11월 20)>

/*
	피보나치 수열
	 ex) f1 = 1, f2 = 1, f(n+2) = f(n+1) + f(n) [f(n) [n >= 1]]

	메모이제이션 :
	 컴퓨터 프로그램이 동일한 계산을 반복해야 할 때, 이전에 계산한 값을 메모리에 저장함으로써
	 동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를 빠르게 하는 기술이다. 동적 계획법의 핵심이 되는 기술이다.
*/

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

#define max 200

long long fibo_1(int n);
long long fibo_2(int n);
long long fibo_3(int n);

long long fibo_1(int n) // 50이상이면 구하는 속도는 너무 느려진다.
{
	if (n == 1 || n == 2)
	{
		return 1;
	}
	else
	{
		return fibo_1(n - 2) + fibo_1(n - 1);
	}
}

long long fibo_2(int n) // 메모이제이션을 이용하여 중복 계산을 없앤 경우
{
	static long long memo[max];

	if (memo[n] > 0)
	{
		return memo[n];
	}

	if (n == 1 || n == 2)
	{
		return memo[n] = 1;
	}
	else
	{
		return memo[n] = fibo_2(n - 2) + fibo_2(n - 1);
	}
}

long long fibo_3(int n)
{
	long long i, f_i, f_i_1, t;

	if (n == 1 || n == 2)
	{
		return 1;
	}

	f_i_1 = 1;
	f_i = 1;
	for (i = 3; i <= n; i++)
	{
		t = f_i;
		f_i = f_i_1 + f_i;
		f_i_1 = t;
	}

	return f_i;
}

int main()
{
	int n;
	printf("n을 입력하시오.\n");
	scanf("%d", &n);

	/* 1. 일반적인 재귀적 방식 */
	// printf("\n%d", fibo_1(n));

	/* 2. 메모이제이션을 이용한 재귀적 방식*/
	//printf("\n%d", fibo_2(n));

	/* 2. for문을 이용한 방식*/
	//printf("\n%d", fibo_3(n));

	/*
		숫자가 커지면 오버플로우가 발생하여 (-)값이 나와버린다. 50이상인 경우에 (-)값이 발생
	*/

	return 0;
}
