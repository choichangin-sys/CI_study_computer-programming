// 출처 표시 : "문제로 풀어보는 알고리즘" <저자 : 황인욱, 김용혁 지음> <출판사 : 인사이트> <출간년도 : 초판 2012년 8월 5일 (8쇄 : 2018년 11월 20)>

/*
	수분할
	 ex)
	 5를 분할하면
	 1 + 1 + 1 + 1 + 1
	 2 + 1 + 1 + 1
	 2 + 2 + 1
	 3 + 1 + 1
	 3 + 2
	 4 + 1
	 5
	 총 일곱 가지가 나온다.
	 
	 5/3 분할은
	 1 + 1 + 1 + 1 + 1
	 2 + 1 + 1 + 1
	 2 + 2 + 1
	 3 + 1 + 1
	 3 + 2
	 총 다섯 가지이다. (3을 넘는 수가 나오면 안됨.)

	 메모이제이션 :
	  컴퓨터 프로그램이 동일한 계산을 반복해야 할 때, 이전에 계산한 값을 메모리에 저장함으로써
	  동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를 빠르게 하는 기술이다. 동적 계획법의 핵심이 되는 기술이다.
*/

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

#define max 200

int partition_1(int n, int m);
int partition_2(int n, int m);
int partition_3(int n, int m, int arr[], int arr_len);
void print_arr(int arr[], int arr_len);

int partition_1(int n, int m)
{
	int count = 0;

	if (n < m)
	{
		m = n;
	}
	if (n == 0)
	{
		return 1;
	}

	for (int i = 1; i <= m; i++)
	{
		count += partition_1(n - i, i);
	}

	return count;
}

int partition_2(int n, int m) // 메모이제이션 이용
{
	static int memo[max][max];
	int count = 0;

	if (n < m)
	{
		m = n;
	}
	if (memo[n][m] > 0)
	{
		return memo[n][m];
	}
	if (n == 0)
	{
		return memo[n][m] = 1;
	}

	for (int i = 1; i <= m; i++)
	{
		count += partition_2(n - i, i);
	}

	return memo[n][m] = count;
}

int partition_3(int n, int m, int arr[], int arr_len)
{
	int count = 0;

	if (n < m)
	{
		m = n;
	}
	if (n == 0)
	{
		print_arr(arr, arr_len);
		return 1;
	}

	for (int i = 1; i <= m; i++)
	{
		arr[arr_len] = i;
		count += partition_3(n - i, i, arr, arr_len + 1);
	}

	return count;
}

void print_arr(int arr[], int arr_len)
{
	for (int i = 0; i < arr_len; i++)
	{
		printf("%d ", arr[i]);
	}
	printf("\n");
}

int main()
{
	int num[max], n, m;

	printf("input n / m : ");
	scanf("%d %d", &n, &m);

	/* 1. 재귀적 방식 */
	//printf("total : %d", partition_1(n, m));

	/* 2. 메모이제이션 이용한 재귀적 방식 */
	//printf("total : %d", partition_2(n, m));

	/* 3. 메모이제이션 및 재귀적 방식을 이용하여 수분할 결과 및 개수 출력 */
	printf("total : %d", partition_3(n, m, num, 0));

	return 0;
}
