// 출처 표시 : "문제로 풀어보는 알고리즘" <저자 : 황인욱, 김용혁 지음> <출판사 : 인사이트> <출간년도 : 초판 2012년 8월 5일 (8쇄 : 2018년 11월 20)>

/*
	메모이제이션 :
	 컴퓨터 프로그램이 동일한 계산을 반복해야 할 때, 이전에 계산한 값을 메모리에 저장함으로써
	 동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를 빠르게 하는 기술이다. 동적 계획법의 핵심이 되는 기술이다.
*/

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <Windows.h>
#include <math.h>

#define M 100000

int max_consecutive_sum1(int arr[], int input_arr);
int max_consecutive_sum2(int arr[], int input_arr);
int MAX(int x, int y);
int max_sum1(int arr[], int input_arr);
int max_sum2(int arr[], int input_arr);
int calculate_max_consecutive_sum(int arr[], int input_arr);
int find_max_consecutive_sum1(int arr[], int input_arr);
int find_max_consecutive_sum2(int arr[], int input_arr);

int arr_Temporary[M];

int max_consecutive_sum1(int arr[], int input_arr) // 삼중 루프를 사용한 N의 3승의 시간 복잡도 갖는 느린 프로그램이다.
{
	// O(n^3)이라 부른다.
	// 1만 개의 정수 배열 입력에 대해서 11분 10초가 걸린다.

	int i, j, k, sum, max_sum = arr[0];

	for (i = 0; i < input_arr; i++)
	{
		for (j = i; j < input_arr; j++)
		{
			sum = 0;

			for (k = i; k <= j; k++)
			{
				sum += arr[k];

				if (sum > max_sum)
				{
					max_sum = sum;
				}
			}
		}
	}	

	return max_sum;
}

int max_consecutive_sum2(int arr[], int input_arr) // 이중 루프를 사용한 N의 2승의 시간 복잡도 갖는 개선 프로그램이다.
{
	// O(n^2)이라 부른다.
	// 1만 개은 빠르게 계산되지만 10만 개는 24초, 100만 개는 40분이 넘는다. 

	int i, j, sum, max_sum = arr[0];

	for (i = 0; i < input_arr; i++)
	{
		sum = 0;

		for (j = i; j < input_arr; j++)
		{
			sum += arr[j];

			if (sum > max_sum)
			{
				max_sum = sum;
			}
		}
	}

	return max_sum;
}

int MAX(int x, int y)
{
	if (x > y)
	{
		return x;
	}

	return y;
}

int max_sum1(int arr[], int input_arr)
{
	if (input_arr == 1)
	{
		return arr[0];
	}

	return MAX(max_sum2(arr, input_arr), max_sum1(arr, input_arr - 1));
}

int max_sum2(int arr[], int input_arr)
{
	if (input_arr == 1)
	{
		return arr[0];
	}

	return MAX(max_sum2(arr, input_arr - 1) + arr[input_arr - 1], arr[input_arr - 1]);
}

int calculate_max_consecutive_sum(int arr[], int input_arr)
{
	// O(n)이라 부른다.
	int i;

	arr_Temporary[0] = arr[0];

	for (i = 1; i < input_arr; i++)
	{
		arr_Temporary[i] = MAX(arr[i], arr[i] + arr_Temporary[i - 1]);
	}
}

int find_max_consecutive_sum1(int arr[], int input_arr)
{
	if (input_arr == 1)
	{
		return arr[0];
	}

	return MAX(arr_Temporary[input_arr - 1], find_max_consecutive_sum1(arr, input_arr - 1));
}

int find_max_consecutive_sum2(int arr[], int input_arr)
{
	int max_sum, i;
	
	max_sum = 0;

	for (i = 0; i < input_arr; i++)
	{
		if (arr_Temporary[i] > max_sum)
		{
			max_sum = arr_Temporary[i];
		}
	}

	return max_sum;
}

int main()
{
	srand(time(NULL));

	int i, j,input_arr;
	int arr[M];
	printf("수열(배열)의 총 몇 개인가?\n");
	scanf("%d", &input_arr);

	for (i = 0; i < input_arr; i++)
	{
		// 입력할 수가 많아 rand함수를 이용한다.
		arr[i] = rand() % input_arr + 1; // 0을 제외하기 위해서 1을 (+)한다.
	}
	
	for (j = 0; j < input_arr; j++)
	{
		if (j % 2 == 0)
		{
			arr[j] = arr[j] * -1; // (-)를 입력시킨다.
		}

		printf("%d ", arr[j]); // 잘 입력을 했는지 확인
	}
	
	/* 1. 3중 루프를 사용한 계산 */
	//printf("\n%d", max_consecutive_sum1(arr, input_arr));

	/* 2. 2중 루프를 이용한 계산 */
	//printf("\n%d", max_consecutive_sum2(arr, input_arr));

	/* 3. 재귀적 방식을 이용한 계산 */
	//printf("\n%d", max_sum1(arr, input_arr));

	/* 4. 동적 방식을 이용한 계산*/
	calculate_max_consecutive_sum(arr, input_arr);

	// 재귀 호출을 있는 방식
	//printf("\n%d", find_max_consecutive_sum1(arr, input_arr));

	// 재귀 호출을 없애는 방식
	printf("\n%d", find_max_consecutive_sum2(arr, input_arr));

	return 0;
}
