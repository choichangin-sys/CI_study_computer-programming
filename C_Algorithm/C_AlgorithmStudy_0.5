// 출처 표시 : "문제로 풀어보는 알고리즘" <저자 : 황인욱, 김용혁 지음> <출판사 : 인사이트> <출간년도 : 초판 2012년 8월 5일 (8쇄 : 2018년 11월 20)>

/*
(큐를 이용한) 은행 대기번호 관리
큐(queue) = 먼저 들어간 데이터가 먼저 나오는 자료구조 
노드(node) = 데이터와 포인터를 갖고 있는 상태
연결리스트(linked list) = 노드들로 이어져있는 자료구조
연결리스트는 이중 연결리스트(doubly linked list), 이중 원형 연결리스트 등 여러가지가 있지만
여기서는 자기 뒤의 노드만 알고 있는 단일 연결리스트(singly linked list)만 쓸 예정
*/

#define _CRT_SECURE_NO_WARNINGS
#define QUEUE_CAPACITY 8

#include <stdio.h>
#include <stdlib.h>

typedef struct NODE //노드를 선언
{
	int key; // 저장할 번호
	struct NODE* next; // 다음 번호 주소
}node_t;

// 전역변수
node_t* head = NULL, * tail = NULL; // node를 통한 선언 및 초기화

void insert_node(int number);
int delete_node();

void insert_node(int number)
{
	node_t* new_node = (node_t *)malloc(sizeof(node_t)); // 동적할당
	new_node->key = number;
	new_node->next = NULL;

	if (head == NULL)
	{
		head = new_node;
		tail = new_node;
	}
	else
	{
		tail->next = new_node;
		tail = new_node;
	}
}

int delete_node()
{
	node_t* node;
	int r;

	if (head == NULL)
	{
		return -1;
	}

	node = head;
	head = head->next;

	if (head == NULL)
	{
		tail = NULL;
	}

	r = node->key;
	free(node);

	return r;
}

void main()
{
	int number, r;

	do
	{
		printf("\ninput number : ");
		scanf("%d", &number);
		printf("\n");

		if (number > 0)
		{
			insert_node(number);
		}
		else if (number == 0)
		{
			r = delete_node();
			
			if (r == -1) // 만약 비어있다면 뜨는 메시지
			{
				printf("queue empty!\n");
			}
			else // 비어있지 않다면 나오는 메시지
			{
				printf("[%d]\n", r);
			}
		}

	} while (number >= 0);
}
