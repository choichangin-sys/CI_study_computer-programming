// 출처 표시 : "문제로 풀어보는 알고리즘" <저자 : 황인욱, 김용혁 지음> <출판사 : 인사이트> <출간년도 : 초판 2012년 8월 5일 (8쇄 : 2018년 11월 20)>

/*
	부분집합의 합

	ex)
	합 : 100 , 집합 크기 10으로 설정
	6 9 13 14 20 21 22 30 49 55
	=> 만들 수 있음
	합 : 101 , 집합 크기 10으로 설정
	10 20 30 40 50 60 70 80 90 100
	=> 만들 수 없음

	메모이제이션 :
	 컴퓨터 프로그램이 동일한 계산을 반복해야 할 때, 이전에 계산한 값을 메모리에 저장함으로써
	 동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를 빠르게 하는 기술이다. 동적 계획법의 핵심이 되는 기술이다.
*/

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

#define arr_max 100
#define c_arr_max 2000

int c_arr[c_arr_max][c_arr_max];

int MAX(int x, int y);
int subset_sum(int arr[], int m, int n);
void calculate_subset_sum(int arr[], int n, int m);

int MAX(int x, int y)
{
	if (x > y)
	{
		return x;
	}

	return y;
}

int subset_sum(int arr[], int n, int m) // 재귀적 방식
{
	if (n == 0)
	{
		if (m == 0)
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}

	return MAX(subset_sum(arr, n - 1, m - arr[n - 1]), subset_sum(arr, n - 1, m));
}

void calculate_subset_sum(int arr[], int n, int m) // 재귀적 방식
{
	int i, j;

	for (i = 0; i <= n; i++)
	{
		c_arr[i][0] = 1;
	}

	for (i = 1; i <= m; i++)
	{
		c_arr[0][i] = 0;
	}

	for (i = 1; i <= n; i++)
	{
		for (j = 1; j <= m; j++)
		{
			c_arr[i][j] == 0;

			if (j >= arr[i - 1])
			{
				if (c_arr[i - 1][j - arr[i - 1]] == 1)
				{
					c_arr[i][j] = 1;
				}
			}

			if (c_arr[i - 1][j] == 1)
			{
				c_arr[i][j] = 1;
			}
		}
	}
}

void main()
{
	int m, n, sum;
	int arr[arr_max];

	printf("* 첫 번째는 원하는 합, 두 번째는 집합의 크기 *\n");
	printf("int put : ");
	scanf("%d %d", &m, &n);

	for (int i = 0; i < n; i++)
	{
		scanf("%d", &arr[i]);
	}

	/* 1. 재귀적 방식 */
	sum = subset_sum(arr, n, m);

	if (sum == 1)
	{
		printf("Possible\n");
	}
	else if (sum == 0)
	{
		printf("Impossible\n");
	}

	/* 2. 동적 프로그래밍 + 메모이제이션*/
	calculate_subset_sum(arr, n, m);

	if (c_arr[n][m])
	{
		printf("Possible\n");
	}
	else
	{
		printf("Impossible\n");
	}
}
